- Class: meta
  Course: DataScienceAndR
  Lesson: RDataEngineer-06-Join
  Author: Wush Wu and Cheng-Yu Lin
  Type: Standard
  Organization: Taiwan R User Group
  Version: 2.3.1.1

- Class: text
  Output: 這門課程要介紹資料科學團隊在剛成立時，一定要經常使用的技術：資料比對。

- Class: text
  Output: 現代資料科學有很豐富的內涵。每天都有新的統計方法、新的演算法的發明，讓人類
    在處理資料的能力上更進一步。

- Class: text
  Output: 但是在企業中，或是實際應用中，最重要的是「價值」，而不是「處理資料的手法」。

- Class: text
  Output: 而一種很重要的「價值」來自於，我們能夠完成過去辦不到的事情。資料科學也是如此。
    我們在企業內，就是要能夠在「有限的資源中」做出「過去做不到的事情」。而一個資料科學團隊，
    所擁有的最特別的資產，就是檢視各種不同資料源的能力。

- Class: text
  Output: |
    當我們取得一個來源的資料之後，前面的課程協助我們從中萃取出有用的資訊（01~04）、並且能夠
    轉換成結構化資料（05），而這個課程的目的是要讓大家可以將複數資料源的知識彙整起來。

- Class: text
  Output: 就我個人的經驗，這是資料科學團隊為企業帶來價值的捷徑。

- Class: cmd_question
  Output: 首先，請同學安裝套件dplyr。已經裝過得同學請輸入`skip()`略過
  CorrectAnswer: check_then_install("dplyr", "0.4.3")
  AnswerTests: test_package_version("dplyr", "0.4.3")

- Class: cmd_question
  Output: 接著，請同學載入dplyr
  CorrectAnswer: library(dplyr)
  AnswerTests: test_search_path("dplyr")

- Class: cmd_question
  Output: 再來，請同學打開：`vignette("two-table", package = "dplyr")`
  CorrectAnswer: vignette("two-table", package = "dplyr")
  AnswerTests: omnitest('vignette("two-table", package = "dplyr")')

- Class: text
  Output: |
    這份文件很清楚的說明dplyr所提供的各種整合兩個data.frame的功能。
    接下來的課程中，我們就依照這份文件的脈落，用肌肉記住它們。

- Class: cmd_question
  Output: |
    請同學安裝nycflights13的資料。已經載入的同學可以輸入`skip()`
  CorrectAnswer: check_then_install("nycflights13", "0.1")
  AnswerTests: test_package_version("nycflights13", "0.1")

- Class: cmd_question
  Output: |
    請同學載入套件：`nycflights13`
  CorrectAnswer: library(nycflights13)
  AnswerTests: test_search_path("nycflights13")

- Class: cmd_question
  Output: |
    nycflights13的`flights`，有航空公司的簡稱（在`carrier`欄位）。
    而`airlines`中則有航空公司的全名。做上一課時，我們已經看過`flights`
    的資料了。現在請同學輸入：`View(airlines)`看一下航空公司的資料。
  CorrectAnswer: View(airlines)
  AnswerTests: omnitest('View(airlines)')

- Class: cmd_question
  Output: |
    dplyr提供的`left_join`可以讓我們把航空公司的全名貼到`flights`資料上。
    但是在貼資料的時候，我們一定要有一個依據。
    我們先看一下`flights`的第一筆資料，請同學用`slice`作答。
  CorrectAnswer: slice(flights, 1)
  AnswerTests: omnitest(correctVal = slice(flights, 1))

- Class: mult_question
  Output: |
    參考airlines的資料後，我們要貼哪一筆航空公司的全名到`flights`的第一筆資料呢？
  AnswerChoices: United Air Lines Inc.(UA);American Airlines Inc.(AA);US Airways Inc.(US)
  CorrectAnswer: "United Air Lines Inc.(UA)"
  AnswerTests: omnitest(correctVal="United Air Lines Inc.(UA)")

- Class: text
  Output: |
    在同學剛剛的思考過程中，應該是這樣的。`flights`的第一筆資料的航空公司簡稱是UA，而
    United Air Lines Inc.的簡稱也是UA，所以我們把United Air Lines Inc.當成第一筆
    資料的航空公司全名。

- Class: cmd_question
  Output: |
    這樣的比對過程中，我們是透過航空公司簡稱（carrier欄位），當兩者相同的時候，才宣佈
    比對成功，貼上資料。接下來，我們請同學打開`left_join`的說明文件。
  CorrectAnswer: ?left_join
  AnswerTests: any_of_exprs("?left_join", "help(left_join)", 'help("left_join")')

- Class: mult_question
  Output: |
    請問以下哪一個「不是」`left_join`的參數呢？
  AnswerChoices: x;y;by;copy;key
  CorrectAnswer: "key"
  AnswerTests: omnitest(correctVal = 'key')

- Class: text
  Output: |
    我們來講解`left_join`的參數意義。`x`和`y`在這邊，扮演的角色就是兩個data.frame。
    `x`是我們關心的、主要的data.frame，我們的目的是想把`y`的資料貼到`x`之上。所以
    在剛剛航空公司名稱的範例中，`x`是`flights`，`y`是`airlies`。

- Class: text
  Output: |
    `by`則代表「黏貼規則」的欄位。回憶一下航空公司的範例，我們是透過比對「航空公司簡稱（carrier）」
    才能完成比對，所以`by`在這裡的值就是`"carrier"`，也就是欄位名稱。在慣例中，當我們提到：
    依據「xxx」來比對`x`和`y`兩張表格的時候，通常我們就是指要作上述的動作，而「xxx」扮演的角色
    就是航空公司簡稱所扮演的角色。

- Class: script
  Output: |
    接著請同學從flights中「依序」選出`year:day, hour, origin, dest, tailnum, carrier`
    等欄位，再抽出前100筆記資料，最後和`airlines`做`left_join`。
  Script: RDataEngineer-06-01.R
  AnswerTests: rdataengineer_06_01(answer01)


- Class: cmd_question
  Output: |
    `weather`資料中也包含了天氣的資訊。所以我們可以依據時間和地點，把天氣的資料貼到`answer01`之上。
    請同學輸入：`View(weather)`先看一下天氣資料
  CorrectAnswer: View(weather)
  AnswerTests: omnitest('View(weather)')

- Class: cmd_question
  Output: |
    接著請同學輸入：`answer02 <- left_join(answer01, weather)`，請注意到我們沒有給任何
    `by`的資訊。
  CorrectAnswer: answer02 <- left_join(answer01, weather)
  AnswerTests: omnitest('answer02 <- left_join(answer01, weather)')

- Class: cmd_question
  Output: |
    請輸入`View(answer02)`，我們看一下`answer02`的資料，黏貼後的結果。
  CorrectAnswer: View(answer02)
  AnswerTests: omnitest('View(answer02)')

- Class: text
  Output: |
    剛剛我們為什麼省略`by`之後，`left_join`還是仍然正常運作呢？它是依據什麼欄位來比對資料的？

- Class: cmd_question
  Output: |
    根據文件，在沒有給定`by`的狀況下，`left_join`會比對兩個data.frame的欄位名稱（`colnames`），
    並且用重複的欄位名稱做比對的依據。請同學輸入：
    `intersect(colnames(answer01), colnames(weather))`
  CorrectAnswer: intersect(colnames(answer01), colnames(weather))
  AnswerTests: omnitest('intersect(colnames(answer01), colnames(weather))')

- Class: text
  Output: |
    螢幕上顯示的四個欄位：`"year"   "month"  "day" "hour" "origin"`就是`left_join`比對
    `answer01`與`weather`的依據。這代表說，要這四個欄位全部都一模一樣，`left_join`才會
    把對應的天氣資料黏貼到`answer01`上。
    另外同學也可以體會，上一課所學的`select`搭配重新命名的機制在此是很有用的。

- Class: text
  Output: |
    課程進行至今，我們開始會跳過一些字面意義上很簡單的函數，例如`intersect`。
    同學可以自行打開說明文件查詢這些函數的用法。如果覺得太難需要說明，我也很歡迎
    同學到<https://github.com/wush978/DataScienceAndR/issues>或是聊天室
    <https://gitter.im/wush978/DataScienceAndR>進行回報。

- Class: text
  Output: |
    另外在剛剛的比對過程中，R 有發出警告：這是因為我們在比較一個字串向量與一個`factor`。
    有走過RBasic系列的同學應該可以同意，這兩者的本質是非常類似的，所以`left_join`就會
    自動把factor轉換成字串向量後再做比對。

- Class: cmd_question
  Output: |
    接著，我們看一下`airports`這個資料集。請同學輸入：`View(airports)`，可以看到
    裡面有不少關於機場的資訊（如：經緯度、簡稱等等）
  CorrectAnswer: View(airports)
  AnswerTests: omnitest('View(airports)')

- Class: text
  Output: |
    這裡我們要比對的依據是地點，但是`flights`的資料裡面有兩個關於地點的欄位：`origin`與
    `dest`。這兩個欄位都是記載著美國機場的代號。而`airports`資料中機場的代號是`faa`。
    問題來了，請問我們應該要怎麼告訴`left_join`做比對呢？

- Class: cmd_question
  Output: |
    我們可以透過`by`參數來指定比對的方法。`by`的參數除了是一般的字串向量外，也可以是
    有名字的字串向量。舉例來說：`c("origin" = "faa")`就是一個有名字的字串向量。
    請同學輸入：`c("origin" = "faa")`看看。
  CorrectAnswer: c("origin" = "faa")
  AnswerTests: omnitest('c("origin" = "faa")')

- Class: cmd_question
  Output: |
    接著，我們透過`answer03 <- left_join(answer02, airports, by = c("origin" = "faa"))`
    來比對這兩筆資料。比對的依據分別是`answer02$origin`與`airports$faa`。請同學試試看執行
    `left_join`那段程式碼。
  CorrectAnswer: answer03 <- left_join(answer02, airports, by = c("origin" = "faa"))
  AnswerTests: omnitest('answer03 <- left_join(answer02, airports, by = c("origin" = "faa"))')

- Class: cmd_question
  Output: |
    現在我們輸入`View(answer03)`看看這個包含航班資訊、天氣資訊與出發機場的地理位置資訊的資料。
  CorrectAnswer: View(answer03)
  AnswerTests: omnitest('View(answer03)')
