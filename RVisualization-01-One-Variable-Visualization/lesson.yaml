- Class: meta
  Course: DataScienceAndR
  Lesson: RVisualization-01-One-Variable-Visualization
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 2.3.1.2
- Class: text
  Output: 這個課程的目是讓同學理解，如何依據數據的型態，在一個維度上適當的呈現數據。
- Class: cmd_question
  Output: 請同學先打開`plot`的說明。
  CorrectAnswer: ?plot
  AnswerTests: omnitest('?plot')
  Hint: ?plot
- Class: text
  Output: |
    `plot`主要有兩個參數：`x`和`y`。同學可能會認為，`x`代表x座標的值，`y`代表y座標的值。
    一般來說這是對的，但是也不盡然。`plot`是個會依據`x`的型態不同、`y`的型態不同，
    而有不同行為的函數。
- Class: cmd_question
  Output: 首先，我們拿R 的內建的infert資料集為範例。這是當年研究流產與不孕症之間關係的資料 集。請同學輸入：`?infert`先看看資料對每個欄位的說明。
  CorrectAnswer: ?infert
  AnswerTests: omnitest("?infert")
  Hint: ?infert
- Class: text
  Output: |
    infert得第一欄(education)代表該名婦女的教育程度；第二欄(age)代表年齡；第三欄(parity)
    代表已經生產的子女數（經產狀況）；第四欄(induced)代表人工流產的次數；第五欄(case)代表是
    實驗組或是對照組（也就是有無不孕）；第六欄(spontaneous)代表自然流產的次數；第七欄與第八
    欄則是與實驗設計相關的資料。
- Class: cmd_question
  Output: 接著我們來具體看看資料。請同學輸入：`View(infert)`來看看實際的資料的值。這裡 每筆資料都代表一名婦女。
  CorrectAnswer: View(infert)
  AnswerTests: omnitest('View(infert)')
  Hint: View(infert)
- Class: cmd_question
  Output: 我們等等先拿`infert$spontaneous`做說明。請同學先把`infert$spontaneous`存到 `spon`變數中。
  CorrectAnswer: spon <- infert$spontaneous
  AnswerTests: check_val("spon", infert$spontaneous)
  Hint: spon <- infert$spontaneous
- Class: cmd_question
  Output: |
    請問同學，`spon`是什麼型態？
  CorrectAnswer: class(spon)
  AnswerTests: omnitest(correctVal = class(spon))
  Hint: class(spon)
- Class: cmd_question
  Output: |
    在R 中，`plot`是最泛用的繪圖指令。我們先請同學輸入：plot(spon)。
  CorrectAnswer: plot(spon)
  AnswerTests: omnitest('plot(spon)')
  Hint: plot(spon)
- Class: text
  Output: |
    走過上一步之後，同學應該會看到R 產生一張有很多點點的圖形。同學可以搭配之前打開的
    `infert`資料來看。這張圖中，每個點的x 軸代表一名婦女的編號，y 軸代表著一名婦女
    自然流產的次數。所以最左邊的點，x 軸座標是1 代表是第一筆婦女的資料，y 軸座標是
    `2.0`，代表她自然流產過兩次。
- Class: cmd_question
  Output: 接著，我們請同學先輸入： `spon <- factor(spon)`，轉換一下 數據形態。
  CorrectAnswer: spon <- factor(spon)
  AnswerTests: check_val("spon", factor(infert$spontaneous))
  Hint: spon <- factor(spon)
- Class: cmd_question
  Output: 我們再輸入一次：`plot(spon)`
  CorrectAnswer: plot(spon)
  AnswerTests: omnitest("plot(spon)")
  Hint: plot(spon)
- Class: text
  Output: 這次R 的繪圖結果就不同了。從左邊數來第一個灰色的bar，x 軸的說明文字是：`0`，y軸 座標約140，代表`spon`中有140個`0`。
- Class: mult_question
  Output: 請問同學，`spon`中大約有多少個`1`?
  AnswerChoices: 100;70;40
  CorrectAnswer: '70'
  AnswerTests: omnitest(correctVal="70")
- Class: cmd_question
  Output: 請同學輸入：`table(spon)`。這個函數會計算一個向量中各種值的個數。
  CorrectAnswer: table(spon)
  AnswerTests: omnitest("table(spon)")
  Hint: table(spon)
- Class: text
  Output: R 會告訴各位同學，`spon`中剛好有71個`1`。
- Class: text
  Output: |
    所以如果當我們輸入`plot(x)`時，`x`是數值向量或整數向量時，R 會依序把`x`的值當成y 座標，
    連續的點在圖中。
- Class: text
  Output: |
    反之，當`x`是類別向量或字串向量時，R 則會把各種類別的個數化成長條圖。因為這種狀況下，
    R不知道合理的方法把數據轉換成y座標(數值)。
- Class: mult_question
  Output: 我們也拿`spon`來複習一下初等統計學的數值系統。根據`?infert`的說明，`spon`的值 為0時代表該名婦女沒有自然流產過，值為1時代表該名婦女自然流產過一次，值為2時代表該名婦女
    自然流產過兩次以上。請問同學，`spon`比較適合名目尺度(選1)、順序尺度(選2)、區間尺度(選3)、 還是比例尺度(選4)？
  AnswerChoices: 1;2;3;4
  CorrectAnswer: '2'
  AnswerTests: omnitest(correctVal="2")
  Hint: |
    `spon`有順序性是無庸置疑。但是`spon`中的2是「兩次或以上」，而不是單純的「兩次」，所以
    會應該要使用「順序尺度」。
- Class: text
  Output: |
    以自然流產數據`spon`為例，我也認為第二張的長條圖(把數據當成順序尺度)，是比較容易解讀的。
    事實上，統計學家在看名目尺度與順序尺度的資料時，也只能看各種類別的個數。而順序尺度應該在
    成像長條的排列順序時，依照類別的順序做排序。
- Class: text
  Output: |
    這張圖直接告訴我們：`spon`只有3種值，而「0次流產」的婦女數量比「1次流產」和「超過2次流產」
    的次數還要多。
- Class: cmd_question
  Output: 請同學把`infert$age`存到變數`age`
  CorrectAnswer: age <- infert$age
  AnswerTests: check_val("age", infert$age)
  Hint: age <- infert$age
- Class: cmd_question
  Output: 請問`age`的型態是？
  CorrectAnswer: class(age)
  AnswerTests: omnitest(correctVal = class(age))
  Hint: class(age)
- Class: cmd_question
  Output: 請同學輸入`plot(age)`
  CorrectAnswer: plot(age)
  AnswerTests: omnitest("plot(age)")
  Hint: plot(age)
- Class: text
  Output: |
    這張`plot(age)`的結果，可以讓我們觀察`age`是否和資料的順序有相關性。由於整個圖形
    並沒有看出特別的趨勢，所以「沒有證據」顯示兩者有特別的關係。
- Class: cmd_question
  Output: |
    分析時，我們常常用長條圖來觀看區間尺度或比例尺度的數據分佈。請同學輸入：`x <- hist(age)`
    來繪製`age`的長條圖，觀察`age`的分佈。
  CorrectAnswer: x <- hist(age)
  AnswerTests: omnitest("x <- hist(age)")
  Hint: x <- hist(age)
- Class: cmd_question
  Output: |
    根據右邊的長條圖，我們看到有三個年齡層的樣本數特別高。雖然圖中可以告訴我們，最高峰位於
    25~30歲之間，但是並沒辦法清楚的告訴我們圖的範圍。剛剛的assignment會把R 如何繪製長條圖
    的細節存至變數`x`中。請同學輸入：`x`來顯示繪圖的細節
  CorrectAnswer: x
  AnswerTests: omnitest("x")
  Hint: x
- Class: mult_question
  Output: |
    `x`本質上是一個list，而它名為"breaks"的切點記載了長條圖的切割點。請由`$breaks`
    (也就是`x$breaks`)的值，回答：「樣本數最高的年齡層為：」
  AnswerChoices: (25,27];(26,28];(27,29]
  CorrectAnswer: (26,28]
  AnswerTests: omnitest(correctVal="(26,28]")
- Class: cmd_question
  Output: |
    這裡幫同學複習：(26,28]的意思是說，age > 26 且 age <= 28。`x$counts`則記載著每個
    層級的個數。根據`x$counts`，(26,28]的資料共有45筆。請同學輸入：`sum(age > 26 & age <= 28)`
    來驗證。
  CorrectAnswer: sum(age > 26 & age <= 28)
  AnswerTests: omnitest("sum(age > 26 & age <= 28)")
  Hint: sum(age > 26 & age <= 28)
- Class: text
  Output: |
    從`hist`的結果出發，同學有沒有發現`hist(age)`本質上，就是把`age`透過`x$breaks`切成
    一段一段，變成順序尺度的數據之後，再用類似剛剛我們繪`spon`的方式做呈現。
- Class: cmd_question
  Output: |
    請同學輸入：`plot(cut(age, breaks = x$breaks))`。
  CorrectAnswer: plot(cut(age, breaks = x$breaks))
  AnswerTests: omnitest("plot(cut(age, breaks = x$breaks))")
  Hint: plot(cut(age, breaks = x$breaks))
- Class: text
  Output: 我們會看到一張圖，以`plot(spon)`的格式顯示`hist(age)`的內容。
- Class: text
  Output: |
    這種把順序尺度、比例尺度的數據切片後變成順序尺度的技巧，在實務分析上非常常用。如何選取
    切點，以及切點的個數，也是非常藝術的。
- Class: text
  Output: |
    舉例來說，我在做政府採購分析時，由於法規會把標案做分類(例如一百萬以下的標案不用公開
    招標，兩億以上的招標有更多法規需要遵守)，此時Domain Knowledge會很自然地告訴我們
    合理的切點。
- Class: text
  Output: |
    而`hist`在`age`的例子，則是抓好上下界之後，等距切割。
- Class: text
  Output: |
    另外一種做法，是透過`quantile`函數做切割。這樣每個切片中的資料個數會非常接近，在做進階
    分析時有好處。
- Class: cmd_question
  Output: 請同學輸入：`infert$education`，這筆數據本身就是把比例尺度切片後得到順序尺度的結果。
  CorrectAnswer: infert$education
  AnswerTests: omnitest("infert$education")
  Hint: infert$education
- Class: cmd_question
  Output: |
    在R 之中，處理區間尺度與比例尺度的資料，還有其他的方法。請同學輸入：plot(density(age))。
  CorrectAnswer: plot(density(age))
  AnswerTests: omnitest("plot(density(age))")
  Hint: plot(density(age))
- Class: text
  Output: |
    這種做法會得到一個平滑的曲線，因為R 並沒有先把`age`做切片，而是用一種叫做`kernel density estimation`
    的統計方法來估計`age`這筆數據的density。如果同學有學過幾率論，那這個方法所得到的曲線，
    就是依照樣本數來估計的`probability density function`。
- Class: text
  Output: |
    而我們也可以從這個圖中來觀察：有多少個尖峰？數據在右邊或左邊的尾巴有沒有拉得很長？有沒有明顯的
    異常值？
- Class: mult_question
  Output: 請問同學，圖中的曲線，共有幾個尖峰？
  AnswerChoices: 0;1;2;3
  CorrectAnswer: '2'
  AnswerTests: omnitest(correctVal = "2")
- Class: mult_question
  Output: |
    請問同學，圖中的曲線，是1:左偏（少數特別小的`age`）、2:右偏（少數特別大的`age`）或
    3:不偏（沒有上述兩種狀況）？
  AnswerChoices: 1;2;3
  CorrectAnswer: '3'
  AnswerTests: omnitest(correctVal = "3")
- Class: mult_question
  Output: |
    請問同學，這個曲線有沒有在某個地方有奇怪的尖峰？
  AnswerChoices: Yes;No
  CorrectAnswer: 'No'
  AnswerTests: omnitest(correctVal = "No")
- Class: cmd_question
  Output: |
    這個統計方法中，很重要的參數是：`bw`。我們先請同學來畫出不同`bw`的結果。
    請同學先輸入：`plot(density(age, bw = 0.1))`
  CorrectAnswer: plot(density(age, bw = 0.1))
  AnswerTests: omnitest("plot(density(age, bw = 0.1))")
  Hint: plot(density(age, bw = 0.1))
- Class: text
  Output: |
    在`bw`特別小的狀態，我們會看到一個很醜，而且很接近長條圖的結果。這是因為這筆數據是整數資料，
    所以當`bw`小於1 很多時，就會看到一個個的尖峰，而這些尖峰的高度則和寬度有關。舉例來說，位在
    25的尖峰，他的面積必須接近： `sum(age == 25) / length(age)`，也就是`age`為25的樣本
    數比率。所以越小的`bw`，尖峰的寬度越小，尖峰就要越高。
- Class: cmd_question
  Output: |
    請同學輸入：`plot(density(age, bw = 1))`
  CorrectAnswer: plot(density(age, bw = 1))
  AnswerTests: omnitest("plot(density(age, bw = 1))")
  Hint: plot(density(age, bw = 1))
- Class: text
  Output: |
    我們可以看到整體的曲線變得平滑許多。理想上，這比較接近真實的probability density function。
- Class: cmd_question
  Output: 接下來，我們請同學輸入`sunspot.year`。這是1700年至1988年，每年的太陽黑子數量。
  CorrectAnswer: sunspot.year
  AnswerTests: omnitest("sunspot.year")
  Hint: sunspot.year

